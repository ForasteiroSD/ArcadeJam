//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""3589a8ac-4148-4dcf-bd63-a2f4e2e810f4"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3fc55513-c195-4e19-8141-8370e6d0fc36"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""b0013858-a171-4feb-98a8-3471d0ccaae8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Player1"",
                    ""id"": ""8685fa00-cd17-4fbc-91ef-bc9d65daa4c7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b8b7baed-173c-4caa-b210-8ca4b6c5a1b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5fd46938-a2b8-419b-9596-8b2f67a9eefa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""277f63f8-4667-4452-823e-234b1235846b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""994bc8be-2f27-44de-bc4b-3a47b6e8dcb2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""62084b1b-973a-40dd-a279-605c956e1ce2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI2"",
            ""id"": ""514ed6b4-fb33-4f44-aebc-4e4a3e8f0e90"",
            ""actions"": [
                {
                    ""name"": ""DIRECIONAIS"",
                    ""type"": ""PassThrough"",
                    ""id"": ""30f1b0f5-0289-44b5-ab5a-cc8a76924d18"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit2"",
                    ""type"": ""Button"",
                    ""id"": ""f34bde6c-1e96-4452-8de7-0eab605f5c9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Player2"",
                    ""id"": ""831a9949-baaa-4018-9d4a-85077b1eda68"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DIRECIONAIS"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d0ede866-235f-43f6-a384-fea11155e9ae"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DIRECIONAIS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ebaf8df1-d384-4402-a054-c7b031e70ead"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DIRECIONAIS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7e0fcb45-a968-42fc-8609-3085c5454221"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DIRECIONAIS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e88631e2-ccc0-4018-a4c2-db0dfa190415"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DIRECIONAIS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a95a4f65-638b-4fb7-8020-af632931e56b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_WASD = m_UI.FindAction("WASD", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        // UI2
        m_UI2 = asset.FindActionMap("UI2", throwIfNotFound: true);
        m_UI2_DIRECIONAIS = m_UI2.FindAction("DIRECIONAIS", throwIfNotFound: true);
        m_UI2_Submit2 = m_UI2.FindAction("Submit2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_WASD;
    private readonly InputAction m_UI_Submit;
    public struct UIActions
    {
        private @NewControls m_Wrapper;
        public UIActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_UI_WASD;
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // UI2
    private readonly InputActionMap m_UI2;
    private List<IUI2Actions> m_UI2ActionsCallbackInterfaces = new List<IUI2Actions>();
    private readonly InputAction m_UI2_DIRECIONAIS;
    private readonly InputAction m_UI2_Submit2;
    public struct UI2Actions
    {
        private @NewControls m_Wrapper;
        public UI2Actions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DIRECIONAIS => m_Wrapper.m_UI2_DIRECIONAIS;
        public InputAction @Submit2 => m_Wrapper.m_UI2_Submit2;
        public InputActionMap Get() { return m_Wrapper.m_UI2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI2Actions set) { return set.Get(); }
        public void AddCallbacks(IUI2Actions instance)
        {
            if (instance == null || m_Wrapper.m_UI2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI2ActionsCallbackInterfaces.Add(instance);
            @DIRECIONAIS.started += instance.OnDIRECIONAIS;
            @DIRECIONAIS.performed += instance.OnDIRECIONAIS;
            @DIRECIONAIS.canceled += instance.OnDIRECIONAIS;
            @Submit2.started += instance.OnSubmit2;
            @Submit2.performed += instance.OnSubmit2;
            @Submit2.canceled += instance.OnSubmit2;
        }

        private void UnregisterCallbacks(IUI2Actions instance)
        {
            @DIRECIONAIS.started -= instance.OnDIRECIONAIS;
            @DIRECIONAIS.performed -= instance.OnDIRECIONAIS;
            @DIRECIONAIS.canceled -= instance.OnDIRECIONAIS;
            @Submit2.started -= instance.OnSubmit2;
            @Submit2.performed -= instance.OnSubmit2;
            @Submit2.canceled -= instance.OnSubmit2;
        }

        public void RemoveCallbacks(IUI2Actions instance)
        {
            if (m_Wrapper.m_UI2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI2Actions instance)
        {
            foreach (var item in m_Wrapper.m_UI2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI2Actions @UI2 => new UI2Actions(this);
    public interface IUIActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
    public interface IUI2Actions
    {
        void OnDIRECIONAIS(InputAction.CallbackContext context);
        void OnSubmit2(InputAction.CallbackContext context);
    }
}
